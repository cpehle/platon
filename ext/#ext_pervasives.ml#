the
* GNU Lesser General Public License for more details.
                                        *
                                        * You should have received a copy of the GNU Lesser General Public License
                                                                             * along with this program; if not, write to the Free Software
                                                                                                                         * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)






                                                                                                           external reraise: exn -> 'a = "%reraise"

                                                                                                           let finally v action f   =
                                                                                                             match f v with
                                                                                                             | exception e ->
                                                                                                                         action v ;
                                                                                                                         reraise e
                                                                                                                       | e ->  action v ; e

                                                                                                           let with_file_as_chan filename f =
                                                                                                             finally (open_out filename) close_out f

                                                                                                           let with_file_as_pp filename f =
                                                                                                             finally (open_out filename) close_out
                                                                                                                     (fun chan ->
                                                                                                                      let fmt = Format.formatter_of_out_channel chan in
                                                                                                                      let v = f  fmt in
                                                                                                                      Format.pp_print_flush fmt ();
                                                                                                                      v
                                                                                                                     )


                                                                                                           let  is_pos_pow n =
                                                                                                             let module M = struct exception E end in
                                                                                                             let rec aux c (n : Int32.t) =
                                                                                                               if n <= 0l then -2
                                                                                                               else if n = 1l then c
                                                                                                               else if Int32.logand n 1l =  0l then
                                                                                                                 aux (c + 1) (Int32.shift_right n 1 )
                                                                                                               else raise M.E in
                                                                                                             try aux 0 n  with M.E -> -1

                                                                                                           let failwithf ~loc fmt = Format.ksprintf (fun s -> failwith (loc ^ s))
                                                                                                                                                    fmt

                                                                                                           let invalid_argf fmt = Format.ksprintf invalid_arg fmt

                                                                                                           let bad_argf fmt = Format.ksprintf (fun x -> raise (Arg.Bad x ) ) fmt


                                                                                                           let rec dump r =
                                                                                                             if Obj.is_int r then
                                                                                                               string_of_int (Obj.magic r : int)
                                                                                                             else (* Block. *)
                                                                                                               let rec get_fields acc = function
                                                                                                                 | 0 -> acc
                                                                                                                 | n -> let n = n-1 in get_fields (Obj.field r n :: acc) n
                                                                                                               in
                                                                                                               let rec is_list r =
                                                                                                                 if Obj.is_int r then
                                                                                                                   r = Obj.repr 0 (* [] *)
                                                                                                                 else
                                                                                                                   let s = Obj.size r and t = Obj.tag r in
                                                                                                                   t = 0 && s = 2 && is_list (Obj.field r 1) (* h :: t *)
                                                                                                               in
                                                                                                               let rec get_list r =
                                                                                                                 if Obj.is_int r then
                                                                                                                   []
                                                                                                                 else
                                                                                                                   let h = Obj.field r 0 and t = get_list (Obj.field r 1) in
                                                                                                                   h :: t
                                                                                                               in
                                                                                                               let opaque name =
                                                                                                                       (* XXX In future, print the address of value 'r'.  Not possible
                                                                                                                        * in pure OCaml at the moment.  *)
                                                                                                                 "<" ^ name ^ ">"
                                                                                                               in
                                                                                                               let s = Obj.size r and t = Obj.tag r in
                                                                                                               (* From the tag, determine the type of block. *)
                                                                                                               match t with
                                                                                                               | _ when is_list r ->
                                                                                                                  let fields = get_list r in
                                                                                                                  "[" ^ String.concat "; " (List.map dump fields) ^ "]"
                                                                                                               | 0 ->
                                                                                                                  let fields = get_fields [] s in
                                                                                                                  "(" ^ String.concat ", " (List.map dump fields) ^ ")"
                                                                                                               | x when x = Obj.lazy_tag ->
      (* Note that [lazy_tag .. forward_tag] are < no_scan_tag.  Not
               * clear if very large constructed values could have the same
               * tag. XXX *)
                                                                                                                  opaque "lazy"
                                                                                                               | x when x = Obj.closure_tag ->
                                                                                                                  opaque "closure"
                                                                                                               | x when x = Obj.object_tag ->
                                                                                                                  let fields = get_fields [] s in
                                                                                                                  let _clasz, id, slots =
                                                                                                                    match fields with
                                                                                                                    | h::h'::t -> h, h', t
                                                                                                                    | _ -> assert false
                                                                                                                  in
      (* No information on decoding the class (first field).  So just print
       * out the ID and the slots. *)
                                                                                                                  "Object #" ^ dump id ^ " (" ^ String.concat ", " (List.map dump slots) ^ ")"
                                                                                                               | x when x = Obj.infix_tag ->
                                                                                                                  opaque "infix"
                                                                                                               | x when x = Obj.forward_tag ->
                                                                                                                  opaque "forward"
                                                                                                               | x when x < Obj.no_scan_tag ->
                                                                                                                  let fields = get_fields [] s in
                                                                                                                  "Tag" ^ string_of_int t ^
                                                                                                                    " (" ^ String.concat ", " (List.map dump fields) ^ ")"
                                                                                                               | x when x = Obj.string_tag ->
                                                                                                                  "\"" ^ String.escaped (Obj.magic r : string) ^ "\""
                                                                                                               | x when x = Obj.double_tag ->
                                                                                                                  string_of_float (Obj.magic r : float)
                                                                                                               | x when x = Obj.abstract_tag ->
                                                                                                                  opaque "abstract"
                                                                                                               | x when x = Obj.custom_tag ->
                                                                                                                  opaque "custom"
                                                                                                               | x when x = Obj.custom_tag ->
                                                                                                                  opaque "final"
                                                                                                               | x when x = Obj.double_array_tag ->
                                                                                                                  "[|"^
                                                                                                                    String.concat ";"
                                                                                                                                  (Array.to_list (Array.map string_of_float (Obj.magic r : float array))) ^
                                                                                                                      "|]"
                                                                                                               | _ ->
                                                                                                                  opaque (Printf.sprintf "unknown: tag %d size %d" t s)

let dump v = dump (Obj.repr v)~]""\"")")")"]"'